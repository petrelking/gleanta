<?php
/**
 * Author : why9
 * Email : why@why9.com
 * Date  : 18-8-7 下午5:03
 * Project : wd
 */

namespace app\payment\controller;


use app\index\controller\Base;
use think\App;
use think\facade\Config;
use think\facade\Request;
use app\weidoo\library\model\FactoryModel as FModel;
use app\weidoo\library\model\ErrorModel as EModel;

class Index extends Base
{
    public static $model;
    public function __construct(App $app = null)
    {
        parent::__construct($app);
    }
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        self::$model = FModel::instance('Index','payment',false,'logic');
    }

    public function index(){

       var_dump(Config::get('index/paytypes'));
   }

    /**
     * 添加支付类型--系统级
     * @return \RuntimeException
     */
    public function addPayment()
   {
       $info = self::getValidate('payadd');
       $info['addtime'] = time();
       $success = self::$model->addPayment($info);
       return $success === false ? out_error_json(EModel::instance()->getError()) : out_success_json(lang('execute success'), $success);
   }

    /**
     * 编辑支付信息
     * @return \RuntimeException
     */
    public function editPayment()
    {
        $info = self::getValidate('payedit');
        $success = self::$model->editPayment($info);
        return $success === false ? out_error_json(EModel::instance()->getError()) : out_success_json(lang('execute success'), $success);
    }

    /**
     * 删除支付信息
     * @return \RuntimeException
     */
    public function delPayment()
    {
        $info = self::getValidate('paydel');
        $success = self::$model->delPayment($info);
        return $success === false ? out_error_json(EModel::instance()->getError()) : out_success_json(lang('execute success'), $success);
    }

    /**
     * 获取支付信息列表
     * @return \RuntimeException
     */
    public function getPayment()
    {
        $success = self::$model->getPayment();
        return $success === false ? out_error_json(EModel::instance()->getError()) : out_success_json(lang('execute success'), $success);
    }

    /**
     * 获取商户支付功能列表
     * @return \RuntimeException
     */
    public function getPaymentsList()
   {
       $biz_id = 1;//$this->user['biz_id']
       $success = self::$model->getPaymentsListl($biz_id);
       return $success === false ? out_error_json(EModel::instance()->getError()) : out_success_json(lang('execute success'), $success);
      // $this->result($get_configs,200,'ok');
   }

    /**
     *
     * @return \RuntimeException
     */
    public function chkBizPayType()
   {
       $success = self::$model->chkBizPayType();
       return $success === false ? out_error_json(EModel::instance()->getError()) : out_success_json(lang('execute success'), $success);
   }

    /**
     * 根据类型支付
     * @return \RuntimeException
     */
    public function payByType()
   {
       $info = self::getValidate('orderpay');
       $extinfo =self::getValidate('online');
       $success = self::$model->payByType($info,$extinfo);
       return $success === false ? out_error_json(EModel::instance()->getError()) : out_success_json(lang('execute success'), $success);
   }

    /**
     * 获取指定订单的支付记录
     * @return \RuntimeException
     */
    public function getPayHistory()
   {
       $order_id = self::getValidate('payhis');
       $success = self::$model->getPayHistory($order_id);
       return $success === false ? out_error_json(EModel::instance()->getError()) : out_success_json(lang('execute success'), $success);
   }

    /**
     * 设置商户的支付类型
     * @return \RuntimeException
     */
    public function setBizPayType()
   {
       $info = self::getValidate('bizpayset');
       $success = self::$model->setBizPayType($info);
       return $success === false ? out_error_json(EModel::instance()->getError()) : out_success_json(lang('execute success'), $success);
   }

   public static function getValidate($action)
   {
       switch ($action) {
           case 'orderpay':
              return[
                  'order_id'     => input("post.order_id/s"),
                  'pay_id'       => input("post.pay_id/s"),
                  'dept_id'      => input("post.dept_id/s"),
                  'cus_id'       => input("post.cus_id/s"),
                  'pay_amount'   => input("post.pay_amount/s"),
                  'pay_type'     => input("post.pay_type/s"),
                  'pay_steps'    => input("post.pay_steps/s"),
                  ];
           case 'online':
               return[
                  'order_no'      => input("post.order_no/s"),
                  'out_trade_no'  => input("post.out_trade_no/s"),
                  'total_amount'  => input("post.total_amount/s"),
                  'total_fee'     => input("post.total_fee/s")
                  ];
           case 'groupons':
               return[
                  'gpon_cardno'    => input("post.gpon_cardno/s"),
                   ];
           case 'coupon':
               return[
                  'coupon_id'    => input("post.coupon_id/s"),
                  'pay_amount'   => input("post.pay_amount/s"),
                   ];
           case 'payhis':
               return[
                   'order_id'    => input("post.order_id/d"),
               ];
           case 'paydel':
               return[
                   'pay_id'    => input("post.pay_id/d"),
               ];
           case 'bizpayset':
               return [
                   'biz_id' => input('post.biz_id/s'),
                   'pay_ids'=> input('post.pay_ids/s'),
               ];
           case 'payadd':
               return [
                   'pay_name' => input('post.pay_name/s'),
                   'pay_type'=> input('post.pay_type/d'),
                   'pay_fee'=> input('post.pay_fee/d'),
                   'pay_max'=> input('post.pay_max/d'),
                   'pay_min'=> input('post.pay_min/d'),
               ];
           default:
               return[''];

       }
   }
}